{"ast":null,"code":"var _jsxFileName = \"/Users/angelhernandez/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/Progress/ProgressBar.js\";\nimport React, { useState } from \"react\";\nexport default function ProgressBar({\n  focusDuration,\n  session,\n  isTimerRunning\n}) {\n  const [progress, setProgress] = useState(0);\n  const maxDuration = focusDuration * 60;\n\n  if (isTimerRunning) {\n    setProgress((maxDuration - session.timeRemaining) / maxDuration * 100);\n    console.log(progress);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progress // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: progress + \"%\"\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 15\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/angelhernandez/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/Progress/ProgressBar.js"],"names":["React","useState","ProgressBar","focusDuration","session","isTimerRunning","progress","setProgress","maxDuration","timeRemaining","console","log","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,eAAe,SAASC,WAAT,CAAqB;AAACC,EAAAA,aAAD;AAAgBC,EAAAA,OAAhB;AAAyBC,EAAAA;AAAzB,CAArB,EAA+D;AAC1E,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CAAD,CAAxC;AAEA,QAAMO,WAAW,GAAGL,aAAa,GAAC,EAAlC;;AACA,MAAGE,cAAH,EAAkB;AACfE,IAAAA,WAAW,CAAE,CAACC,WAAW,GAAGJ,OAAO,CAACK,aAAvB,IAAsCD,WAAvC,GAAoD,GAArD,CAAX;AACCE,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEH;;AAGD,sBAAQ,uDACA;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEM,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeN,QALjB,CAK2B;AAL3B;AAME,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAEP,QAAQ,GAAC;AAAlB,KANT,CAMiC;AANjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADA,CAAR;AAYH","sourcesContent":["import React, {useState} from \"react\";\n\nexport default function ProgressBar({focusDuration, session, isTimerRunning }){\n    const [progress, setProgress] = useState(0)\n\n    const maxDuration = focusDuration*60;\n    if(isTimerRunning){\n       setProgress(((maxDuration - session.timeRemaining)/maxDuration)*100); \n        console.log(progress)\n       \n    }\n\n\n    return (<>\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={progress} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: progress+\"%\"}} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n            </>)\n}"]},"metadata":{},"sourceType":"module"}