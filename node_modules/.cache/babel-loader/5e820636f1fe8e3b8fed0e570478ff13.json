{"ast":null,"code":"var _jsxFileName = \"/Users/angelhernandez/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/Progress/ProgressBar.js\";\nimport React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction isPaused(timer) {\n  return timer ? null : `Paused`;\n}\n\nexport default function ProgressBar({\n  focusDuration,\n  session,\n  isTimerRunning\n}) {\n  let progress = 0;\n  const maxDuration = focusDuration * 60;\n\n  if (isTimerRunning) {\n    const progress = (maxDuration - session.timeRemaining) / maxDuration * 100;\n    console.log(progress);\n    console.log(session);\n  }\n\n  if (session !== null) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, session === null || session === void 0 ? void 0 : session.label, \" for \", minutesToDuration(focusDuration), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, isPaused(isTimerRunning)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": progress // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: progress + \"%\"\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }))))));\n  } else {\n    console.log(session);\n    return null;\n  }\n}","map":{"version":3,"sources":["/Users/angelhernandez/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/Progress/ProgressBar.js"],"names":["React","minutesToDuration","secondsToDuration","isPaused","timer","ProgressBar","focusDuration","session","isTimerRunning","progress","maxDuration","timeRemaining","console","log","label","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,EAA2BC,iBAA3B,QAAmD,mBAAnD;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,SAAOA,KAAK,GAAE,IAAF,GAAU,QAAtB;AACH;;AACD,eAAe,SAASC,WAAT,CAAqB;AAACC,EAAAA,aAAD;AAAgBC,EAAAA,OAAhB;AAAyBC,EAAAA;AAAzB,CAArB,EAA+D;AAC1E,MAAIC,QAAQ,GAAG,CAAf;AAEA,QAAMC,WAAW,GAAGJ,aAAa,GAAC,EAAlC;;AACA,MAAGE,cAAH,EAAkB;AACd,UAAMC,QAAQ,GAAI,CAACC,WAAW,GAAGH,OAAO,CAACI,aAAvB,IAAsCD,WAAvC,GAAoD,GAArE;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AAAqB;;AAEzB,MAAIA,OAAO,KAAK,IAAhB,EAAqB;AACrB,wBAAQ,uDAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,OADL,aACKA,OADL,uBACKA,OAAO,CAAEO,KADd,WAC2Bb,iBAAiB,CAACK,aAAD,CAD5C,aAFF,eAME;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCJ,iBAAiB,CAACK,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEI,aAAV,CADlB,eANF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKR,QAAQ,CAACK,cAAD,CADb,CATF,CADF,CAFA,eAiBA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEO,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB;AAKE,uBAAeN,QALjB,CAK2B;AAL3B;AAME,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAEP,QAAQ,GAAC;AAAlB,OANT,CAMiC;AANjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAjBA,CAFI,CAAR;AAmCC,GApCD,MAoCO;AACHG,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACA,WAAO,IAAP;AACH;AACJ","sourcesContent":["import React from \"react\";\nimport {minutesToDuration, secondsToDuration} from \"../utils/duration\";\n\nfunction isPaused(timer) {\n    return timer? null : `Paused`\n}\nexport default function ProgressBar({focusDuration, session, isTimerRunning }){\n    let progress = 0;\n\n    const maxDuration = focusDuration*60;\n    if(isTimerRunning){\n        const progress = ((maxDuration - session.timeRemaining)/maxDuration)*100; \n        console.log(progress)\n        console.log(session)}\n       \n    if (session !== null){\n    return (<>\n\n        <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n                {session?.label} for { minutesToDuration(focusDuration)} minutes\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n            {secondsToDuration(session?.timeRemaining)} remaining\n            </p>\n            <h3 >\n                {isPaused(isTimerRunning)}\n            </h3>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={progress} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: progress+\"%\"}} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>    \n        </>)\n    } else {\n        console.log(session)\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}