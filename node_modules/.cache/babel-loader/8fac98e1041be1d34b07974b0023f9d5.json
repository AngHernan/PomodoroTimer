{"ast":null,"code":"var _jsxFileName = \"/Users/angelhernandez/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/Progress/ProgressBar.js\";\nimport React from \"react\";\nexport default function ProgressBar({\n  focusDuration,\n  session,\n  isTimerRunning\n}) {\n  // divide total time by 100 = time elapsed\n  // 1 tick = total/100\n  // increase width by 1 for time elapsed\n  // pause if paused and run if started\n  // stop and reset if stopped\n  //is timer running \n  console.log(session);\n  console.log(isTimerRunning); //const timeRemaining = session.timeRemaining;\n  // console.log(timeRemaining)\n\n  const delta = session / focusDuration * 100;\n  let progress = 0;\n  progress += delta;\n  console.log(focusDuration);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: progress\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 15\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/angelhernandez/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/Progress/ProgressBar.js"],"names":["React","ProgressBar","focusDuration","session","isTimerRunning","console","log","delta","progress","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,WAAT,CAAqB;AAACC,EAAAA,aAAD;AAAgBC,EAAAA,OAAhB;AAAyBC,EAAAA;AAAzB,CAArB,EAA8D;AACzE;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ,EARyE,CAUzE;AACA;;AACA,QAAMG,KAAK,GAAGJ,OAAO,GAAED,aAAT,GAA0B,GAAxC;AACA,MAAIM,QAAQ,GAAG,CAAf;AACAA,EAAAA,QAAQ,IAAID,KAAZ;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AACA,sBAAQ,uDACJ;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEO,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACM;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAc,GALhB,CAKoB;AALpB;AAME,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAEF;AAAT,KANT,CAM6B;AAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADN,CADI,CAAR;AAYH","sourcesContent":["import React from \"react\";\n\nexport default function ProgressBar({focusDuration, session, isTimerRunning}){\n    // divide total time by 100 = time elapsed\n    // 1 tick = total/100\n    // increase width by 1 for time elapsed\n    // pause if paused and run if started\n    // stop and reset if stopped\n    //is timer running \n    console.log(session)\n    console.log(isTimerRunning)\n\n    //const timeRemaining = session.timeRemaining;\n    // console.log(timeRemaining)\n    const delta = session/(focusDuration) * 100;\n    let progress = 0;\n    progress += delta;\n    console.log(focusDuration)\n    return (<>\n        <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: progress}} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n            </>)\n}"]},"metadata":{},"sourceType":"module"}