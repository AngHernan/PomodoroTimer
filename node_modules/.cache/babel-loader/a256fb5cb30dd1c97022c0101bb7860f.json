{"ast":null,"code":"var _jsxFileName = \"/Users/angelhernandez/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport StopButton from \"../buttons/stop/StopButton\";\nimport DeltaFocusDuration from \"../buttons/settingDurations/DeltaFocusDuration\";\nimport DeltaBreakDuration from \"../buttons/settingDurations/DeltaBreakDuration\";\nimport ProgressBar from \"../Progress/ProgressBar\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      setOnBreak(false);\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    setOnBreak(true);\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [disable, setDisable] = useState(true); // ToDo: Allow the user to adjust the focus and break duration <-Working but need to set maximums and minimums .\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [onBreak, setOnBreak] = useState(false); // Disable controller for changing duration of break and focus \n\n  const [disableDurationChange, setDisableDurationChange] = useState(false);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 100 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setDisable(false);\n            setDisableDurationChange(true);\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group input-group-lg mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\",\n    \"data-testid\": \"duration-focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"Focus Duration: \", minutesToDuration(focusDuration)), /*#__PURE__*/React.createElement(DeltaFocusDuration, {\n    disableDurationChange: disableDurationChange,\n    setDisableDurationChange: setDisableDurationChange,\n    focusDuration: focusDuration,\n    setFocusDuration: setFocusDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group input-group-lg mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\",\n    \"data-testid\": \"duration-break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, \"Break Duration: \", minutesToDuration(breakDuration)), /*#__PURE__*/React.createElement(DeltaBreakDuration, {\n    disableDurationChange: disableDurationChange,\n    setDisableDurationChange: setDisableDurationChange,\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 14\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(StopButton, {\n    disable: disable,\n    setDisable: setDisable,\n    setSession: setSession,\n    setIsTimerRunning: setIsTimerRunning,\n    setDisableDurationChange: setDisableDurationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(ProgressBar, {\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    session: session,\n    isTimerRunning: isTimerRunning,\n    onBreak: onBreak,\n    setOnBreak: setOnBreak,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/angelhernandez/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","StopButton","DeltaFocusDuration","DeltaBreakDuration","ProgressBar","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","setOnBreak","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","disable","setDisable","setFocusDuration","setBreakDuration","onBreak","disableDurationChange","setDisableDurationChange","Audio","play","playPause","nextState","prevStateSession","oi"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;AACA,OAAOC,UAAP,MAAwB,4BAAxB;AACA,OAAOC,kBAAP,MAA+B,gDAA/B;AACA,OAAOC,kBAAP,MAA+B,gDAA/B;AACA,OAAOC,WAAP,MAAwB,yBAAxB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,SAAS,CAACC,aAAV,GAA0B,CAAtC,CAAtB;AACA,SAAO,EACL,GAAGD,SADE;AAELC,IAAAA;AAFK,GAAP;AAID;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBC,aAArB,EAAoCC,aAApC,EAAmD;AACjD;AACF;AACA;AACE,SAAQC,cAAD,IAAoB;AACzB,QAAIA,cAAc,CAACC,KAAf,KAAyB,UAA7B,EAAyC;AACvCC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAO;AACLD,QAAAA,KAAK,EAAE,UADF;AAELP,QAAAA,aAAa,EAAEK,aAAa,GAAG;AAF1B,OAAP;AAID;;AACCG,IAAAA,UAAU,CAAC,IAAD,CAAV;AACF,WAAO;AACLD,MAAAA,KAAK,EAAE,UADF;AAELP,MAAAA,aAAa,EAAEI,aAAa,GAAG;AAF1B,KAAP;AAID,GAbD;AAcD;;AAED,SAASK,QAAT,GAAoB;AAClB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,KAAD,CAApD,CAFkB,CAGlB;;AACA,QAAM,CAACsB,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACwB,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,IAAD,CAAtC,CALkB,CAOlB;;AACA,QAAM,CAACc,aAAD,EAAgBY,gBAAhB,IAAoC1B,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACe,aAAD,EAAgBY,gBAAhB,IAAoC3B,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAAC4B,OAAD,EAAUV,UAAV,IAAwBlB,QAAQ,CAAC,KAAD,CAAtC,CAVkB,CAWlB;;AACA,QAAM,CAAC6B,qBAAD,EAAwBC,wBAAxB,IAAoD9B,QAAQ,CAAC,KAAD,CAAlE;AACA;AACF;AACA;AACA;AACA;;AACEE,EAAAA,WAAW,CAAC,MAAM;AACd,QAAIoB,OAAO,CAACZ,aAAR,KAA0B,CAA9B,EAAiC;AAC/B,UAAIqB,KAAJ,CAAU,8CAAV,EAA0DC,IAA1D;AACA,aAAOT,UAAU,CAACV,WAAW,CAACC,aAAD,EAAgBC,aAAhB,CAAZ,CAAjB;AACD;;AACD,WAAOQ,UAAU,CAACf,QAAD,CAAjB;AACD,GANQ,EAOTY,cAAc,GAAG,GAAH,GAAS,IAPd,CAAX;AAUA;AACF;AACA;;AACE,WAASa,SAAT,GAAqB;AACnBZ,IAAAA,iBAAiB,CAAEZ,SAAD,IAAe;AAC/B,YAAMyB,SAAS,GAAG,CAACzB,SAAnB;;AACA,UAAIyB,SAAJ,EAAe;AACbX,QAAAA,UAAU,CAAEY,gBAAD,IAAsB;AAC/B;AACA;AACA,cAAIA,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BV,YAAAA,UAAU,CAAC,KAAD,CAAV;AACAK,YAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACA,mBAAO;AACLb,cAAAA,KAAK,EAAE,UADF;AAELP,cAAAA,aAAa,EAAEI,aAAa,GAAG;AAF1B,aAAP;AAID;;AACD,iBAAOqB,gBAAP;AACD,SAZS,CAAV;AAaD;;AACD,aAAOD,SAAP;AACD,KAlBgB,CAAjB;AAmBD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAM,IAAA,SAAS,EAAC,kBAAhB;AAAmC,mBAAY,gBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEsB/B,iBAAiB,CAACW,aAAD,CAFvC,CADA,eAKE,oBAAC,kBAAD;AACA,IAAA,qBAAqB,EAAEe,qBADvB;AAEA,IAAA,wBAAwB,EAAEC,wBAF1B;AAGA,IAAA,aAAa,EAAEhB,aAHf;AAIA,IAAA,gBAAgB,EAAEY,gBAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF,eAcE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,kBAAhB;AAAmC,mBAAY,gBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEoBvB,iBAAiB,CAACY,aAAD,CAFrC,CADF,eAKC,oBAAC,kBAAD;AACA,IAAA,qBAAqB,EAAEc,qBADvB;AAEA,IAAA,wBAAwB,EAAEC,wBAF1B;AAGA,IAAA,aAAa,EAAEf,aAHf;AAIA,IAAA,gBAAgB,EAAEY,gBAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALD,CADF,CADF,CAdF,CADF,eA+BE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,6BADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,kBAAW,gBAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,iBAFZ;AAGE,mBAAY,YAHd;AAIE,IAAA,KAAK,EAAC,sBAJR;AAKE,IAAA,OAAO,EAAEM,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AACE,IAAA,SAAS,EAAEhC,UAAU,CAAC;AACpBmC,MAAAA,EAAE,EAAE,IADgB;AAEpB,uBAAiB,CAAChB,cAFE;AAGpB,wBAAkBA;AAHE,KAAD,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CALF,eAuBE,oBAAC,UAAD;AACA,IAAA,OAAO,EAAEI,OADT;AAEA,IAAA,UAAU,EAAEC,UAFZ;AAGA,IAAA,UAAU,EAAEF,UAHZ;AAIA,IAAA,iBAAiB,EAAEF,iBAJnB;AAKA,IAAA,wBAAwB,EAAES,wBAL1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,CADF,CADF,CA/BF,eAiEI,oBAAC,WAAD;AACA,IAAA,aAAa,EAAEhB,aADf;AAEA,IAAA,aAAa,EAAEC,aAFf;AAGA,IAAA,OAAO,EAAEO,OAHT;AAIA,IAAA,cAAc,EAAEF,cAJhB;AAKA,IAAA,OAAO,EAAEQ,OALT;AAMA,IAAA,UAAU,EAAEV,UANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjEJ,CADF;AA2ED;;AAED,eAAeC,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {minutesToDuration} from \"../utils/duration\";\nimport StopButton  from \"../buttons/stop/StopButton\";\nimport DeltaFocusDuration from \"../buttons/settingDurations/DeltaFocusDuration\";\nimport DeltaBreakDuration from \"../buttons/settingDurations/DeltaBreakDuration\"\nimport ProgressBar from \"../Progress/ProgressBar\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      setOnBreak(false);\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n      setOnBreak(true);\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [disable, setDisable] = useState(true);\n\n  // ToDo: Allow the user to adjust the focus and break duration <-Working but need to set maximums and minimums .\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [onBreak, setOnBreak] = useState(false);\n  // Disable controller for changing duration of break and focus \n  const [disableDurationChange, setDisableDurationChange] = useState(false);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 100 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setDisable(false)\n            setDisableDurationChange(true)\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n  \n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n          <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* ***DONE*** TODO: Update this text to display the current focus session duration */}\n              Focus Duration: { minutesToDuration(focusDuration)}\n            </span>\n            <DeltaFocusDuration \n            disableDurationChange={disableDurationChange} \n            setDisableDurationChange={setDisableDurationChange} \n            focusDuration={focusDuration} \n            setFocusDuration={setFocusDuration}/>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* ***DONE*** TODO: Update this text to display the current break session duration */}\n                Break Duration: { minutesToDuration(breakDuration)}\n              </span>\n             <DeltaBreakDuration \n             disableDurationChange={disableDurationChange} \n             setDisableDurationChange={setDisableDurationChange} \n             breakDuration={breakDuration} \n             setBreakDuration={setBreakDuration}/>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* ***DONE*** TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */ /* COMPLETED */}\n            {/* ***DONE*** TODO: Disable the stop button when there is no active session */  /* COMPLETED */} \n            \n            <StopButton \n            disable={disable} \n            setDisable={setDisable} \n            setSession={setSession} \n            setIsTimerRunning={setIsTimerRunning}\n            setDisableDurationChange={setDisableDurationChange}/>\n          </div>\n        </div>\n      </div>\n        <ProgressBar \n        focusDuration={focusDuration} \n        breakDuration={breakDuration}\n        session={session} \n        isTimerRunning={isTimerRunning}\n        onBreak={onBreak}\n        setOnBreak={setOnBreak}/>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}